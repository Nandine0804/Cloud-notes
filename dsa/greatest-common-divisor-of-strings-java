1071. Greatest Common Divisor of Strings

For two strings s and t, we say "t divides s" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).
Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.

Example 1:

Input: str1 = "ABCABC", str2 = "ABC"
Output: "ABC"
Example 2:

Input: str1 = "ABABAB", str2 = "ABAB"
Output: "AB"
Example 3:

Input: str1 = "LEET", str2 = "CODE"
Output: ""


DRY RUN : 
Initial State:
- str1 = "ABCABC"
- str2 = "ABC"


(str1 + str2) results in "ABCABCABC".
(str2 + str1) results in "ABCABCABC".

--> Since both concatenated results are equal, we proceed to the next step.
Calculate Lengths:

a = str1.length() which is 6.
b = str2.length() which is 3.

--> Call gcd(6, 3):
a = 6, b = 3
Since a > b, call gcd(6 - 3, 3) which is gcd(3, 3)
a = 3, b = 3
Since a == b, return a, which is 3.
Determine Substring:

--> GCD is 3.
Since a > 0 (as 6 > 0), return str1.substring(0, 3), which is "ABC".



CODE : JAVA
class Solution {
    static int gcd(int a,int b){
        if(a == 0){
            return b;
        }
        if(b == 0){
            return a;
        }
        if(a == b){
            return a;
        }
        if(a>b){
            return gcd(a-b,b);
        }
        return gcd(a,b-a);
    }
    public String gcdOfStrings(String str1, String str2) {
        if((str1+str2).equals(str2+str1)){
            int a = str1.length();
            int b = str2.length();
            int gcd = gcd(a,b);
            if(a > 0){
                return str1.substring(0,gcd);
            }
            else{
                return str2.substring(0,gcd);
            }
        }
        else{
            return "";
        }
    }
}
